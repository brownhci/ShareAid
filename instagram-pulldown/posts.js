// Generated by CoffeeScript 1.12.7
var InstagramPosts, Readable, getPosts, jsonRequest,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Readable = require('readable-stream/readable');

jsonRequest = require('./util').jsonRequest;

const timeout = 100;

/**
 * Make a request for a Instagram page, parse the response, and get all the
   posts.
 * @param {String} username
 * @param {String} [startingId] The maximum post id query for (the lowest one
   from the last request), or undefined if this is the first request.
 * @return {Stream} A stream of posts
 */

getPosts = function(username, startingId) {
  if (startingId === 0) {
    return jsonRequest('graphql.hashtag.edge_hashtag_to_media', {
      uri: "https://instagram.com/explore/tags/" + username + "/?__a=1",
    });
  } else {
    return jsonRequest('graphql.hashtag.edge_hashtag_to_media', {
      uri: "https://instagram.com/explore/tags/" + username + "/?__a=1&max_id="+startingId,
    });
  }
};


/**
 * Stream that scrapes as many posts as possible for a given user.
 * @param {String} options.username
 * @return {Stream} A stream of post objects.
 */

InstagramPosts = (function(superClass) {
  extend(InstagramPosts, superClass);

  InstagramPosts.prototype._lock = false;

  InstagramPosts.prototype._minPostId = void 0;

  function InstagramPosts(arg) {
    this.username = arg.username;
    this.destroy = bind(this.destroy, this);
    this._read = bind(this._read, this);
    InstagramPosts.__super__.constructor.call(this, {
      highWaterMark: 16,
      objectMode: true
    });
    this._readableState.destroyed = false;
  }

  var tagCount = 0;
  var tagLimit = 10;
  var endCursor = 0;
  InstagramPosts.prototype._read = function() {
    var hasMorePosts = false, lastPost;
    if (this._lock) {
      return;
    }
    this._lock = true;
    if (this._readableState.destroyed) {
      this.push(null);
      return;
    }
    lastPost = void 0;
    return setTimeout(() => {
      return getPosts(this.username, endCursor).on('error', (function(_this) {
        return function(err) {
          return _this.emit('error', err);
        };
      })(this)).on('data', (function(_this) {
        return function(media) {
          hasMorePosts = tagCount <= tagLimit;
          if (!hasMorePosts) return;
          endCursor = media.page_info.end_cursor;
          media = media.edges
          for(var i in media) {
            var rawPost = media[i].node
            var post;
            post = {
              id: rawPost.id,
              username: _this.username,
              time: +rawPost['taken_at_timestamp'],
              type: rawPost.__typename,
              likes: rawPost.edge_liked_by.count,
              comments: rawPost.edge_media_to_comment.count
            };
            if (rawPost.edge_media_to_caption.edges[0].node.text != null) {
              post.text = rawPost.edge_media_to_caption.edges[0].node.text;
            }
            if (rawPost.display_url) {
              post.media = rawPost.display_url
            } else {
              continue;
            }
            _this._minPostId = rawPost.id;
            if (lastPost != null) {
              _this.push(lastPost);
            }
            lastPost = post;
          }
          return lastPost = post;
        }
      })(this)).on('end', (function(_this) {
        tagCount += 1;
        return function(info) {
          if (hasMorePosts) {
            _this._lock = false;
          }
          if (lastPost !== null) {
            _this.push(lastPost);
          }
          if (!hasMorePosts) {
            return _this.push(null);
          }
        }
      })(this));
    }, timeout);
  };

  InstagramPosts.prototype.destroy = function() {
    if (this._readableState.destroyed) {
      return;
    }
    this._readableState.destroyed = true;
    return this._destroy((function(_this) {
      return function(err) {
        if (err) {
          _this.emit('error', err);
        }
        return _this.emit('close');
      };
    })(this));
  };

  InstagramPosts.prototype._destroy = function(cb) {
    return process.nextTick(cb);
  };

  return InstagramPosts;

})(Readable);

module.exports = InstagramPosts;
